import { Component, Injector } from '@angular/core';

import { URIS } from '@app/_services';
import { BaseReport } from '@app/_bases/basereport.component';
import { HMChartOptions } from '@app/_models';
import { ChartDataSets } from 'chart.js';

@Component({
  selector: 'survey-nps-report',
  templateUrl: 'survey.nps.component.html'
})
export class SurveyNPSReport extends BaseReport {
  opacity = 0.4;
  statistics_url = this.app_service.Based_URLs.front + URIS.front.statistics;
  nps_ChartOptions = null;


  npsGaugeChartOptions = {
    min: -100,
    max: 100,
    redFrom: -100,
    redTo: -50,
    yellowFrom: -50,
    yellowTo: 0,
    greenFrom: 0,
    greenTo: 100,
    majorTicks: ["-100", "-50", "0", "50", "100"],
    minorTicks: 5
  };

  constructor (public injector: Injector) {
    super(injector);
    
    this.initHMChartOptions();
    this.hmoptions_rating_proportions = new HMChartOptions({"title_text": this.translate.instant('REPORT.RATING_DETAILS')});
  }


  /**
   * Convert API output data on ratings to chart data
   * @input rating_data: Array[{count: 63, proportion: 8.47, rating: 1}]
   * @outpt {labels: ['Satisfied', 'Very Satisfied'], data: [3, 6] }
  */
  getFeedbackCountRating(rating_data) {
    let res = { 
      labels: [], 
      data: []
    }
    let nps_rate = new Array(11);
    let level = this.translate.instant("REPORT.LEVEL");
    for (let i=0; i<11; i++) {
      res.labels.push(level + ": " + i);
      nps_rate[i] = 0;
    }
    for (let item of rating_data) {
      nps_rate[item.rating] = item.count;
    }

    let nps_dataset: ChartDataSets = {
      data: nps_rate,
      label: "NPS",
      backgroundColor: [
        'rgba(255, 99, 132, 0.6)',
        'rgba(255, 99, 132, 0.6)',
        'rgba(255, 99, 132, 0.6)',
        'rgba(255, 99, 132, 0.6)',
        'rgba(255, 99, 132, 0.6)',
        'rgba(255, 99, 132, 0.6)',
        'rgba(255, 99, 132, 0.6)',
        'rgba(255, 159, 64, 0.6)',
        'rgba(255, 159, 64, 0.6)',
        'rgba(54, 162, 235, 0.6)',
        'rgba(54, 162, 235, 0.6)'
      ],
      borderColor: [
        'rgb(255, 99, 132)',
        'rgb(255, 99, 132)',
        'rgb(255, 99, 132)',
        'rgb(255, 99, 132)',
        'rgb(255, 99, 132)',
        'rgb(255, 99, 132)',
        'rgb(255, 99, 132)',
        'rgb(255, 159, 64)',
        'rgb(255, 159, 64)',
        'rgb(54, 162, 235)',
        'rgb(54, 162, 235)'
      ],
      pointHoverBackgroundColor: '#fff'
    }

    res.data.push(nps_dataset);
    return res;
  }


  /**
   * Make data of NPS satisfaction score by times for line chart, include 3 matrics
   * - Detractor
   * - Promoter
   * - NPS
   * 
   * @input score_bytimes is array of NPS score in format: [{dtt: "62.5000", prm: "25.0000", score: "-37.5000", time: "2022-11"},â€¦]
   * @output score_by_time_datasets for  chatjs multi-line chart - with three ChartDataSet: NPS, Detractor and Promoter
   * TimeSeries labels is generated by this class when object is initiated
   * 
  */
  getScoreByTimeData(score_bytimes) {
    if (!score_bytimes || !score_bytimes.length)  return;
    if (!this.time_labels || !this.time_labels.length)    return;

    let nps_score = this.convertScoreData_toMap(score_bytimes, "score");
    let dtt_score = this.convertScoreData_toMap(score_bytimes, "dtt");
    let prm_score = this.convertScoreData_toMap(score_bytimes, "prm");

    // Invert detracttor values
    for (let i in dtt_score)    dtt_score[i] = -dtt_score[i];

    const nps_score_Set: ChartDataSets = {
      data: this.fillData2TimeseriesDataset(this.time_labels, nps_score),
      label: "NPS",
      fill: true,
      backgroundColor: 'rgba(255, 159, 64, 0.6)',
      borderColor: 'rgb(255, 159, 64',
      pointHoverBackgroundColor: '#fff'

    };
    const dtt_score_Set: ChartDataSets = {
      data: this.fillData2TimeseriesDataset(this.time_labels, dtt_score),
      label: "Detractor",
      fill: true,
      backgroundColor: "'rgba(255, 99, 132, 0.6)'",
      borderColor: 'rgb(255, 99, 132)',
      pointHoverBackgroundColor: '#fff'
    };
    const prm_score_Set: ChartDataSets = {
      data: this.fillData2TimeseriesDataset(this.time_labels, prm_score),
      label: "Promoter",
      fill: true,
      backgroundColor: 'rgba(54, 162, 235, 0.6)',
      borderColor: 'rgb(54, 162, 235)',
      pointHoverBackgroundColor: '#fff'
    }; 
    
    this.score_by_time_datasets.push(nps_score_Set);
    this.score_by_time_datasets.push(prm_score_Set);
    this.score_by_time_datasets.push(dtt_score_Set);
    return this.score_by_time_datasets;
  }

}

